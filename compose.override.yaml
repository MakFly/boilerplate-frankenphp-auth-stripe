services:
    ###> webapp ###
    webapp:
        container_name: boilerplate-symfony-simple
        build:
            context: .
            dockerfile: Dockerfile
            args:
                ENVIRONMENT: dev
                SERVER_NAME: :80
        ports:
            - 80:80
            # - 443:443
            # - 443:443/udp
        env_file:
            - .env
        environment:
            - APP_ENV=dev
        volumes:
            - ./:/app
            - caddy_data:/data
            - caddy_config:/config
        # commentez la ligne suivante en production, elle permet d'avoir de beaux logs lisibles en dev
        tty: true
        networks:
            - default
    ###< webapp ###

    worker:
        build:
            context: .
            dockerfile: Dockerfile
        deploy:
            replicas: 2  # Scale worker instances dynamically
        command: ["php", "bin/console", "messenger:consume", "notifications", "--time-limit=3600", "--memory-limit=128M", "-vv"]
        volumes:
            - ./:/app
        environment:
            - APP_ENV=dev
        depends_on:
            rabbitmq:
                condition: service_healthy
        networks:
            - default
        tty: true

    # Service RabbitMQ
    rabbitmq:
        image: rabbitmq:3-management
        ports:
            - "5672:5672"
            - "15672:15672"
        environment:
            RABBITMQ_DEFAULT_USER: guest
            RABBITMQ_DEFAULT_PASS: guest
        networks:
            - default
        healthcheck:
            test: ["CMD", "rabbitmqctl", "status"]
            interval: 10s
            timeout: 5s
            retries: 5

    ###> postgres ###
    postgres:
        image: postgres:latest
        environment:
            POSTGRES_USER: test
            POSTGRES_PASSWORD: test
            POSTGRES_DB: symfony
        ports:
            - 5432:5432
        volumes:
            - boilerplate-db:/var/lib/postgresql/data
        networks:
            - default
    ###< postgres ###

    ###> adminer ###
    adminer:
        image: adminer
        environment:
            - ADMINER_PLUGINS=${ADM_PLUGINS}
            - ADMINER_DESIGN=${ADM_DESIGN}
            - ADMINER_DEFAULT_SERVER=${ADM_DEFAULT_SERVER}
            - ADMINER_DEFAULT_USERNAME=${ADM_DEFAULT_USERNAME}
            - ADMINER_DEFAULT_PASSWORD=${ADM_DEFAULT_PASSWORD}
        ports:
            - "9080:8080"
        volumes:
            - adminer-data:/var/lib/adminer
        networks:
            - default
    ###< adminer ###

    ###> dozzle ###
    dozzle:
        image: amir20/dozzle:latest
        ports:
            - 8888:8080
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
        networks:
            - default
    ###< dozzle ###

    ###> mailpit ###
    mailpit:
        image: axllent/mailpit
        volumes:
            - mailpit-data:/data
        ports:
            - 1025:1025
            - 8025:8025
        environment:
            MP_MAX_MESSAGES: 5000
            MP_DATABASE: /data/mailpit.db
            MP_SMTP_AUTH_ACCEPT_ANY: 1
            MP_SMTP_AUTH_ALLOW_INSECURE: 1
        networks:
            - default
    ###< mailpit ###


volumes:
    mailpit-data:
    boilerplate-db:
    adminer-data:
    caddy_data:
    caddy_config:

networks:
    default:
        driver: bridge
