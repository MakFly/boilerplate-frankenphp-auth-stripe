name: CI Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CI_REGISTRY_IMAGE: ghcr.io/${{ secrets.actor }}/boilerplate-symfony-frankenphp-simple

jobs:
  build-app:
    name: Build Application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pdo_pgsql, gd, bcmath, zip, intl, redis, xsl, amqp, xdebug

      - name: Copy Environment Files
        run: cp .env.example .env

      - name: Install Dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y git libnss3-tools
          composer install --optimize-autoloader
          # Note : Cette commande installe aussi bien les dépendances de prod que celles de dev

      - name: Upload Composer Dependencies as Artifact
        uses: actions/upload-artifact@v4.6.0
        with:
          name: composer-dependencies
          path: vendor/
          retention-days: 1

      - name: Build Application
        run: |
          php bin/console cache:warmup
          mkdir -p build
          # Ajoutez ici d'autres commandes de build si nécessaire

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: build-artifact
          path: |
            build/
            var/cache/
          retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [build-app]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: symfony
          POSTGRES_PASSWORD: symfony
          POSTGRES_DB: symfony_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        options: --health-cmd "redis-cli ping"
      mailhog:
        image: mailhog/mailhog
        ports:
          - 1025:1025
          - 8025:8025
    env:
      APP_ENV: test
      APP_SECRET: '$ecretf0rt3st'
      # Correction importante : la base de données doit correspondre à celle du service postgres
      DATABASE_URL: postgresql://symfony:symfony@localhost:5432/symfony_test
      JWT_SECRET_KEY: '%kernel.project_dir%/config/jwt/private.pem'
      JWT_PUBLIC_KEY: '%kernel.project_dir%/config/jwt/public.pem'
      JWT_PASSPHRASE: 'a1b2c3d4e5!@#$%^'
      MAILER_DSN: smtp://mailhog:1025
      MAILER_SENDER_ADDRESS: no-reply@example.com
      TOKEN_TTL: 3600
      APP_OTP_ENABLED: false
      STRIPE_SECRET_KEY: sk_test_51MockValueForTestingPurposesOnly
    steps:
      - uses: actions/checkout@v4

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: pdo_pgsql, gd, bcmath, zip, intl, redis, xsl, amqp, xdebug

      - name: Download Composer Dependencies Artifact
        uses: actions/download-artifact@v4.1.8
        with:
          name: composer-dependencies
          path: vendor/

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: build-artifact
          path: .

      - name: Copy Environment Files
        run: cp .env.example .env && cp phpunit.xml.dist phpunit.xml

      - name: Generate JWT Key Pair
        run: php bin/console lexik:jwt:generate-keypair --overwrite

      - name: Setup Database
        run: |
          php bin/console doctrine:database:drop --if-exists --force --env=test
          php bin/console doctrine:database:create --env=test
          php bin/console doctrine:migrations:migrate --no-interaction --env=test

      - name: Rendre pest exécutable
        run: chmod +x ./vendor/bin/pest

      - name: Run Tests
        run: ./vendor/bin/pest